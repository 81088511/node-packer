#!/usr/bin/env ruby

# Copyright (c) 2017 Minqi Pan <pmq2001@gmail.com>
# 
# This file is part of Node.js Compiler, distributed under the MIT License
# For full terms see the included LICENSE file

$LOAD_PATH.unshift File.expand_path("../../lib", __FILE__)

require "compiler"
require 'optparse'

USAGE = %Q{

Node.js Compiler (nodec) v#{::Compiler::VERSION} (runtime #{::Compiler.node_version})

Compiling your Node.js application into a single executable.

Usage:
  nodec [OPTION]... ENTRANCE

}.strip

EXAMPLES = %Q{

Example:
  git clone --depth 1 https://github.com/jashkenas/coffeescript.git
  cd coffeescript
  nodec bin/coffee
  ./a.out (or a.exe on Windows)

Bug reports and pull requests are welcome on GitHub at
https://github.com/pmq20/node-compiler

}.strip

options = {}

outer_opts = nil

usage = lambda do |out|
  out.puts outer_opts
  out.puts
  out.puts EXAMPLES
end

OptionParser.new do |opts|
  opts.banner = USAGE

  opts.on("-rDIR", "--root=DIR", "Speicifies the path to the root of the application") do |dir|
    options[:root] = dir
  end

  opts.on("-oFILE", "--output=FILE", "Speicifies the path of the output file") do |file|
    options[:output] = file
  end

  opts.on("-dDIR", "--tmpdir=DIR", "Speicifies the directory for temporary files") do |dir|
    options[:tmpdir] = dir
  end

  opts.on("--make-args=ARGS", "Passes extra arguments to make") do |args|
    options[:make_args] = args
  end

  opts.on("--vcbuild-args=ARGS", "Passes extra arguments to vcbuild.bat") do |args|
    options[:vcbuild_args] = args
  end

  opts.on("--npm=FILE", "Specifies the path of npm") do |file|
    options[:npm] = file
  end

  opts.on("--npm-package=NAME", "Downloads and compiles the specified npm package") do |name|
    options[:npm_package] = name
  end

  opts.on("--npm-package-version=VER", "Downloads and compiles the specified version of the npm package") do |ver|
    options[:npm_package_version] = ver
  end

  opts.on("--debug", "Enable debug mode") do
    options[:debug] = true
  end

  opts.on("-v", "--version", "Prints the version of nodec and exit") do
    puts ::Compiler::VERSION
    exit 0
  end

  opts.on("--node-version", "Prints the version of the Node.js runtime and exit") do
    puts ::Compiler.node_version
    exit 0
  end

  opts.on("-h", "--help", "Prints this help and exit") do
    usage.call(STDOUT)
    exit 0
  end

  outer_opts = opts
end.parse!

entrance = ARGV[-1]
unless entrance.kind_of?(String) && entrance.length > 0
  usage.call(STDERR)
  exit 1
end

begin
  instance = ::Compiler.new entrance, options
  instance.run!
rescue ::Compiler::Error => e
  STDERR.puts e.message
  exit 1
end
