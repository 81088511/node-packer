#!/usr/bin/env ruby

# Copyright (c) 2016 Node.js Compiler contributors
# 
# This file is part of Node.js Compiler, distributed under the MIT License
# For full terms see the included LICENSE file

require "node/compiler"
require 'optparse'

USAGE = %Q{
Node.js Compiler (nodec) v#{::Node::Compiler::VERSION} (runtime #{::Node::Compiler.node_version})
Compiler for Node.js which compiles your app into a single executable.

Usage: nodec [OPTION]... [ENTRANCE]
}.strip

EXAMPLES = %Q{
Example 1:
    git clone https://github.com/jashkenas/coffeescript.git
    cd coffeescript
    npm install
    nodec -o coffee bin/coffee

Example 2:
    git clone https://github.com/cnodejs/nodeclub.git
    cd nodeclub
    npm install
    nodec -o nodeclub app.js
}.strip

options = {}

outer_opts = nil

usage = lambda do |out|
  out.puts outer_opts
  out.puts
  out.puts EXAMPLES
end

OptionParser.new do |opts|
  opts.banner = USAGE

  opts.on("-pDIR", "--project-root=DIR", "The path to the root of the project") do |dir|
    options[:project_root] = dir
  end

  opts.on("-oFILE", "--output=FILE", "The path of the output file (default: ./a.out or ./a.exe)") do |file|
    options[:output] = file
  end

  opts.on("-dDIR", "--tempdir=DIR", "The directory for temporary files (default: /tmp/nodec)") do |dir|
    options[:tempdir] = dir
  end

  opts.on("--make-args=ARGS", "Extra arguments to be passed to make") do |args|
    options[:make_args] = args
  end

  opts.on("--vcbuild-args=ARGS", "Extra arguments to be passed to vcbuild.bat") do |args|
    options[:vcbuild_args] = args
  end

  opts.on("-v", "--version", "Prints the version of nodec and exit") do
    puts ::Node::Compiler::VERSION
    exit 0
  end

  opts.on("--node-version", "Prints the version of the Node.js runtime and exit") do
    puts ::Node::Compiler.node_version
    exit 0
  end

  opts.on("-h", "--help", "Prints this help and exit") do
    usage.call(STDOUT)
    exit 0
  end

  outer_opts = opts
end.parse!

entrance = ARGV[-1]
unless entrance.kind_of?(String) && entrance.length > 0
  usage.call(STDERR)
  exit 1
end

begin
  instance = ::Node::Compiler.new entrance, options
  instance.run!
rescue ::Node::Compiler::Error => e
  STDERR.puts e.message
  exit 1
end
